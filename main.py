"""This is telegram bot for training hard."""

import sqlite3
from time import sleep
from datetime import time
from config import *

# Create an instance of the bot
bot = telebot.TeleBot("")

# Global variable to store the user's training schedule
training_schedule = {}
db = sqlite3.connect('reminder.db')
cur = db.cursor()
try:
    query = '''DROP TABLE IF EXISTS 'Chats';
    DROP TABLE IF EXISTS 'Reminders';
    CREATE TABLE 'Chats' (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER
    );

    CREATE TABLE 'Reminders' (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        day TEXT,
        time TEXT,
        remind_in INTEGER,
        FOREIGN KEY (chat_id) REFERENCES Chats(chat_id)
    );
    '''
    statements = query.split(';')
    for statement in statements:
        cur.execute(statement.strip())
    db.commit()
    db.close()
except Exception as e:
    print(e)


@bot.message_handler(commands=['start'])
def start(message):
    """Function handling start command."""
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ %–õ—é—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ% –±–æ—Ç! "
        "–Ø –±—É–¥—É –í–∞—à–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π. –ù–∞–¥–µ—é—Å—å, –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è!",
        reply_markup=menu_markup)


@bot.message_handler(func=lambda message: message.text.lower()
                     in ['–≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', '–≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω', '—Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'])
def handle_menu_message(message):
    """Function menu commands."""
    if message.text.lower() == '–≤—ã–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ':
        choose_exercise(message)
    elif message.text.lower() == '–≤—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω':
        choose_workout_plan(message)
    elif message.text.lower() == '—Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        create_schedule(message)
    elif message.text.lower() == '—É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        print("HUII")
        delete_reminders(message)


def delete_reminders(message):
    chat_id = message.chat.id
    db = sqlite3.connect('reminder.db')
    cur = db.cursor()
    cur.execute("SELECT * FROM Chats WHERE chat_id = ?", (chat_id,))
    result = cur.fetchone()
    print(result)
    if result is None:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!")
    else:
        cur.execute("DELETE FROM 'Reminders' WHERE chat_id = ?", (chat_id,))
        cur.execute("DELETE FROM 'Chats' WHERE chat_id = ?", (chat_id,))
        bot.send_message(chat_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")
    db.commit()
    db.close()


def choose_exercise(message):
    """Function sends body_markup keyboard."""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –≥—Ä—É–ø–ø—ã –º—ã—à—Ü",
        reply_markup=body_markup)


def choose_upper_body_muscle(message):
    """Function sends upper_body_markup keyboard."""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –≤–µ—Ä—Ö–∞ —Ç–µ–ª–∞",
        reply_markup=upper_body_markup)


def choose_lower_body_muscle(message):
    """Function sends lower_body_markup keyboard."""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –Ω–∏–∑–∞ —Ç–µ–ª–∞",
        reply_markup=lower_body_markup)


def choose_workout_plan(message):
    """Function sends workout_markup keyboard."""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è",
        reply_markup=workout_markup)


def create_schedule(message):
    """Function sends schedule_markup keyboard."""
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ‚úÖ\", –µ—Å–ª–∏ –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏.",
        reply_markup=schedule_markup)


@bot.message_handler(
    func=lambda message: message.text.lower() in [
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–≤—Ç–æ—Ä–Ω–∏–∫",
        "—Å—Ä–µ–¥–∞",
        "—á–µ—Ç–≤–µ—Ä–≥",
        "–ø—è—Ç–Ω–∏—Ü–∞",
        "—Å—É–±–±–æ—Ç–∞",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"])
def handle_day(message):
    """Function handles day message."""
    global last_day
    last_day = message.text
    training_schedule[last_day] = None
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm",
        reply_markup=remove_keyboard_markup)


# bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm",
# 			 reply_markup=types.ReplyKeyboardRemove)


@bot.message_handler(regexp=r'\d{2}:\d{2}')
def handle_start_time(message):
    """Function handles day message."""
    time_str = message.text
    try:
        print(last_day, time(int(time_str[:2]), int(time_str[3:])))
        training_schedule[last_day] = message.text
        create_schedule(message)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm",
            reply_markup=remove_keyboard_markup)


@bot.message_handler(func=lambda message: message.text.lower() == "–≥–æ—Ç–æ–≤–æ‚úÖ")
def hande_schedule_finish(message):
    """Function handles schedule finishing message."""
    if not training_schedule:
        bot.send_message(
            message.chat.id,
            "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å.",
            reply_markup=schedule_markup)
    else:
        order = [
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "–í—Ç–æ—Ä–Ω–∏–∫",
            "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥",
            "–ü—è—Ç–Ω–∏—Ü–∞",
            "–°—É–±–±–æ—Ç–∞",
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        sorted_schedule = dict(
            sorted(
                training_schedule.items(),
                key=lambda item: order.index(
                    item[0])))
        msg = ""
        for key, value in sorted_schedule.items():
            msg += f"{key}:\n{value}\n\n"
        bot.send_message(
            message.chat.id,
            msg,
            reply_markup=remove_keyboard_markup)
        bot.send_message(
            message.chat.id,
            "–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö?",
            reply_markup=reminder_markup)


@bot.message_handler(func=lambda message: message.text.lower()
                     in ["–¥–∞, –∑–∞ 30 –º–∏–Ω—É—Ç", "–¥–∞, –∑–∞ 1 —á–∞—Å", "–Ω–µ—Ç"])
def handle_reminder(message):
    """Function handles reminder options."""
    match message.text.lower():
        case '–¥–∞, –∑–∞ 30 –º–∏–Ω—É—Ç':
            set_reminder(30, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–•–æ—Ä–æ—à–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!",
                reply_markup=menu_markup)
        case '–¥–∞, –∑–∞ 1 —á–∞—Å':
            set_reminder(60, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–•–æ—Ä–æ—à–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞!",
                reply_markup=menu_markup)
        case '–Ω–µ—Ç':
            bot.send_message(
                message.chat.id,
                "–ù–∞–¥–µ—é—Å—å, –≤—ã –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö!",
                reply_markup=menu_markup)


def set_reminder(minutes, chat_id):
    """Function sets reminder."""
    db = sqlite3.connect('reminder.db')
    cur = db.cursor()
    cur.execute(
        "INSERT OR IGNORE INTO 'Chats' (chat_id) VALUES (?)", (chat_id,))
    cur.execute("DELETE FROM 'Reminders' WHERE chat_id = ?", (chat_id,))
    db.commit()
    for day, start_time in training_schedule.items():
        cur.execute(
            "INSERT INTO 'Reminders' (chat_id, day, time, remind_in) VALUES (?, ?, ?, ?)",
            (chat_id,
             day,
             start_time,
             minutes))
    db.commit()
    db.close()


@bot.message_handler(func=lambda message: message.text.lower()
                     in ['–≤–µ—Ä—Ö —Ç–µ–ª–∞', '–Ω–∏–∑ —Ç–µ–ª–∞'])
def handle_choose_muscle(message):
    """Function handles group of muscles options."""
    if message.text.lower() == '–≤–µ—Ä—Ö —Ç–µ–ª–∞':
        choose_upper_body_muscle(message)
    elif message.text.lower() == '–Ω–∏–∑ —Ç–µ–ª–∞':
        choose_lower_body_muscle(message)


@bot.message_handler(func=lambda message: message.text.lower()
                     in ['–≥—Ä—É–¥—å', '–±–∏—Ü–µ–ø—Å', '—Ç—Ä–∏—Ü–µ–ø—Å', '–ø–ª–µ—á–∏', '—Å–ø–∏–Ω–∞', '–ø—Ä–µ—Å—Å'])
def handle_upper_body(message):
    """Function handles upper_body options."""
    match message.text.lower():
        case '–≥—Ä—É–¥—å':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–¥—å:\n\n"
            msg += parse_exercises(chest_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '–±–∏—Ü–µ–ø—Å':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–∏—Ü–µ–ø—Å:\n\n"
            msg += parse_exercises(biceps_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '—Ç—Ä–∏—Ü–µ–ø—Å':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å:\n\n"
            msg += parse_exercises(triceps_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '–ø–ª–µ—á–∏':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–ª–µ—á–∏:\n\n"
            msg += parse_exercises(shoulders_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '—Å–ø–∏–Ω–∞':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–ø–∏–Ω—É:\n\n"
            msg += parse_exercises(back_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '–ø—Ä–µ—Å—Å':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å:\n\n"
            msg += parse_exercises(abdominals_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
    bot.send_message(
        message.chat.id,
        "–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –µ—â—ë –ø–æ–º–æ—á—å?",
        reply_markup=menu_markup)


@bot.message_handler(
    func=lambda message: message.text.lower() in [
        '–∏–∫—Ä—ã',
        '–ø–µ—Ä–µ–¥–Ω—è—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞',
        '–∑–∞–¥–Ω—è—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞',
        '—è–≥–æ–¥–∏—Ü—ã'])
def handle_lower_body(message):
    """Function handles lower_body options."""
    match message.text.lower():
        case '–∏–∫—Ä—ã':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∏–∫—Ä—ã:\n\n"
            msg += parse_exercises(calves_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '–ø–µ—Ä–µ–¥–Ω—è—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω—é—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞:\n\n"
            msg += parse_exercises(quads_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '–∑–∞–¥–Ω—è—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–Ω—é—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–¥—Ä–∞:\n\n"
            msg += parse_exercises(hamstrings_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
        case '—è–≥–æ–¥–∏—Ü—ã':
            msg = "üí™üèª–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —è–≥–æ–¥–∏—Ü—ã:\n\n"
            msg += parse_exercises(glutes_exercises)
            bot.send_message(
                message.chat.id,
                msg,
                reply_markup=menu_markup,
                disable_web_page_preview=True)
    bot.send_message(
        message.chat.id,
        "–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –µ—â—ë –ø–æ–º–æ—á—å?",
        reply_markup=menu_markup)


@bot.message_handler(func=lambda message: message.text.lower()
                     in ['2 –¥–Ω—è', '3 –¥–Ω—è', '4 –¥–Ω—è', '5 –¥–Ω–µ–π'])
def handle_workout_plan(message):
    """Function handles workout_plan options."""
    match message.text.lower():
        case '2 –¥–Ω—è':
            bot.send_media_group(message.chat.id, two_days_media)
        case '3 –¥–Ω—è':
            bot.send_media_group(message.chat.id, three_days_media)
        case '4 –¥–Ω—è':
            bot.send_media_group(message.chat.id, four_days_media)
        case '5 –¥–Ω–µ–π':
            bot.send_media_group(message.chat.id, five_days_media)
    bot.send_message(
        message.chat.id,
        "–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –µ—â—ë –ø–æ–º–æ—á—å?",
        reply_markup=menu_markup)


while True:
    try:
        print("Started")
        bot.polling(none_stop=True)
    except Exception as e:
        sleep(3)
        print(e)
